{"version":3,"sources":["expense_hound_cljs/core.cljs"],"mappings":";;AASA,AAAKA,kCAAQ,gDAAA,hDAACC;AAEd,+CAAA,/CAAMC,sGAAiBC,KAAKC,IAAIC;AAAhC,AACE,IAAMC,SAAO,AAAGC,qBAAyBH;AAAzC,AACE,GAAA,GAAQ,WAAA,VAAME;AACZ,OAACE,sBAAOL,KAAKG;;AACb,IAAMG,WAAS,AAACC,OAAUL;AAA1B,AACE,AAACG,sBAAOL,KAAKM;;AACb,OAAGF,qBAAyBH,IAAIK;;;AAExC,iDAAA,jDAAME,0GAAwBC,cAAcC;AAA5C,AACE,IAAMA,gBAMe,iBAAAM,oBAAA;AAAA,AAAA,oBAAAA;AAFA,oDAAA,WAAAF,xDAACC;AAAD,AAAO,OAAA,gFAAAD;GAFP,kBAAA,WAAAH,7BAACC;AAAD,AAAU,SAAI,AAACC,6CAAE,AAAA,qGAAAF,kBAAmBF,oBAAe,2DAAA,3DAACI,6CAAEJ;GAFtDC;;AAMAM;;;IACfC,kBAAgB,gEAAA,hEAACC,+CAAOC,qBAAIT;AAPlC,AAAA,kDAAA,6EAAA,dAQcA,yFACMO;;AAEtB,yCAAA,zCAAMG,0FAAgBC;AAAtB,AAAyB,+BAAA,WAAAC,nCAACC,sBAAYF;AAAb,AAAgB,8EACIG,vBACA,uBAAA,eAAAF,kBAAA,IAAA,5DAACG,hDACDC;;;AAE7C,2CAAA,3CAAMC;AAAN,AACE,IAAMC,MAAI,AAACC;IACLC,eAAa,AAAU,YAAA,ZAAUF;IACjCG,kBAAgB,AAAU,EAAI,cAAA,bAAG,AAAOH,mBACZ,uBAAA,IAAA,3BAAW,SAAA,TAAOA,oCAClB,SAAA,TAAOA;AAJzC,AAKE,IAAAI,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,AAAAC;IAAAC,aAAA,CAAA,2DAAA;IAAAC,aAAA,CAAA;IAAAC,aAAA,AAAAC,gBAGoF/C;IAHpFgD,aAAA,CAAAF;IAAAG,aAAA,AAAAC,uCAAAL,WAAAG;IAAAG,aAAA,CAAAF,WAAA;IAAAG,aAAA,AAAAF,uCAAAN,WAAAO;IAAAE,aAAA,0DAAA,2HAAAD,rLAEsDqD;IAFtDnD,aAAA,CAAA,+IAKuKrB;IALvKsB,aAAA,CAAA,2DAAA;IAAAC,aAAA,CAAA;IAAAC,aAAA,AAAAV,gBAMoF/C;IANpF0D,aAAA,CAAAD;IAAAE,aAAA,AAAAT,uCAAAM,WAAAE;IAAAE,aAAA,CAAAD,WAAA;IAAAE,aAAA,AAAAX,uCAAAK,WAAAK;IAAAE,aAAA,0DAAAR,6DAAAO,vHAKsD4C;IALtD1C,aAAA,CAAA,+IAQuK7B;IARvK8B,aAAA,CAAA,2DAAA;IAAAC,aAAA,CAAA;IAAAC,aAAA,AAAAnB,gBASoF/C;IATpFmE,aAAA,CAAAD;IAAAE,aAAA,AAAAlB,uCAAAe,WAAAE;IAAAE,aAAA,CAAAD,WAAA;IAAAE,aAAA,AAAApB,uCAAAc,WAAAK;IAAAE,aAAA,0DAAAR,6DAAAO,vHAQsDmC;IARtDjC,aAAA,CAAAnB,WAAAS,WAAAS;IAAAE,aAAA,KAAA9B,2BAAA,KAAA,EAAA,IAAAD,WAAA8B,WAAA;IAAAE,aAAA,mEAAAD,nEAEmC8B,kDAAUC;IAF7ChE,kBAAAA;AAAA,AAAA,OAAAmC,4CAAAnC,gBAAA,IAAAkC;;AAAA,GAAA,CAAAjC,oBAAA;AAAA,IAAAmC,aAAA,CAAApC,YAAA;IAAAqC,aAAA,AAAAC,4CAAAF,WAAA,IAAA;IAAAG,aAAA,AAAAD,4CAAAF,WAAA,IAAA;IAAAI,aAAA,AAAAF,4CAAAF,WAAA,IAAA;IAAAK,aAAA,iBAAAC,aAAAN;iBAAAC,bAAWwB;gBAAXtB,ZACWlE;wBADXmE,pBAEWsB;AAFX,AAaiB,kBAAKI;AAAL,mMACMA,vCACA,AAACnF,vGACD,AAACoF,wJAAM,AAAChG,+CAAuB,AAAA,mFAAO+F,UAAU,AAAA,oFAAO7F,7aACvD,+bAAA,xbAAC+F,ogBAAwB,CAAG,AAAA,kGAAcF,YAAU,AAAA,yGAAkB,AAAC/F,+CAAuB,AAAA,mFAAO+F,UAAU,AAAA,oFAAOJ;;;IAjB7InB,aAAA,AAAA,oFAAAN;IAAAO,aAAA,6CAAAH,WAAAE,xDAaYjE;IAbZsB,kBAAAA;AAAA,AAAA,OAAA6C,6CAAA7C,gBAAA4C;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAE,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;4FAAA9C;;AAAA,AAAA,IAAAgD,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAAlD,sBAAAC;AAAA,AAAA,GAAA,AAAAkD,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAC;AAAA,AAAA,IAAAC,uBAAArD;AAAA,AAAA,CAAAqD,qBAAA,OAAAF;;AAAAE;AAAA,GAAA,AAAAC,cAAA,CAAAtD,YAAA;AAAA,IAAAuD,uBAAAvD;AAAA,AAAA,CAAAuD,qBAAA,OAAA,AAAAC,gBAAA,CAAAxD,YAAA;;AAAAuD;AAAA,MAAAJ;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAhD;;;;AAAAgD;;;;;mFAAAhD;;;;;4FAAAA;;;;;;;;;IAAAyD,uBAAA,iBAAAC,iBAAA,AAAA5D;AAAA,AAAA,CAAA4D,eAAAC,AAAA,OAAAhE;;AAAA+D;;AAAA,AAAA,OAAAE,2DAAAH;;;AAAA9D;;AAmBJ,mDAAA,nDAAM0E,8GAAqBjG,cAAckG;AAAzC,AACE,kEAAA,+GAAA,2CAAA,2DAAA,2CAAA,SAAA,AAAA/D,yDAAA,gFAAA,MAAA,oEAAA,2CAAA,sDAAA,qFAAA,7sBAACgE,oVAC+B/G,gSAED8G,2EAAmBlG,0EAAwB,AAAU,AAACoB;;AAEvF,uCAAA,+CAAAgF,tFAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAqBI;kBAArB,AAAAF,4CAAAF,eAAA,zEACqBK;uBADrB,AAAAH,4CAAAF,eAAA,9EAEqBM;cAFrB,AAAAJ,4CAAAF,eAAA,rEAGqBO;qBAHrB,AAAAL,4CAAAF,eAAA,5EAIqBQ;YAJrB,AAAAN,4CAAAF,eAAA,nEAKqBS;AALrB,AAAA,0FAAA,iDAAA,2CAAA,kEAAA,mFAAA,iEAAA,mFAAA,uFAAA,2CAAA,uDAAA,2CAAA,6EAAA,uBAAA,+HAAA,y8BAAA,mFAAA,xtDAMaL,oJACJA,+UACqC,oDAAA,PAAKK,uCACEA,8BACO,yFAAA,5CAAK,CAAA,QAAO,CAAGH,mBAAiBD,oDACjC,4GAAA,/DAAK,CAAA,QAAO,CAAG,CAAGC,mBAAiBE,kBAAgBH,6CAC1G,yHAAA,mFAAA,iDAAA,mFAAA,+CAAA,2CAAA,uDAAA,2CAAA,uDAAA,yCAAA,mFAAA,7rBAAI,6CAAA,7CAACtG,iDAAIyG,iBACP,4CAAKD,4eAC+BA,wJAAgB,CAAGA,UAAQC,+KAC5DF;;AAET,wCAAA,xCAAMI,wFAAetB,WAAWoB;AAAhC,AAAA,0FAAA,mGAEG,iBAAAG,qBAAA,8DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAjC,cAAA+B;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAs3EgD,AAAAiF,sBAAArF;IAt3EhDK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,IAAAK,aAAA,AAAAC,eAAAP,gBAAAK;IAAAC,iBAAA,AAAArB,4BAAAqB;kBAAA,AAAApB,4CAAAoB,eAAA,zEAAOjB;YAAP,AAAAH,4CAAAoB,eAAA,nEACOb;YADP,AAAAP,4CAAAoB,eAAA,nEAEOlB;sBAFP,AAAAF,4CAAAoB,eAAA,7EAGOnH;uBAHP,AAAA+F,4CAAAoB,eAAA,9EAIOhB;AAJP,AAAA,AAAA,AAAAkB,uBAAAL,SAKE,iBAAMrG,MAAI,AAACC;IACLiH,gBAAc,6EAAA,7EACC,EAAI,cAAA,bAAG,AAAOlH,mBACZ,SAAA,TAAOA,cACP,kBAAA,IAAA,tBAAM,SAAA,TAAOA,qCACfA;IAEfyF,UAAQ,AAAC0B,WAAc,CAAG,CAAG,CAAG3B,mBAAiBnG,mBAAiB6H,iBAAe7H;AAPvF,AAAA,0FAAA,iDAAA,2CAAA,kEAAA,wHAAA,2CAAA,6DAAA,gFAAA,6FAAA,mEAAA,wFAAA,tjBAQaiG,iGACTD,uIAAqBC,0EACMC,wFACKC,4EACTC,iFACOC,sEACTC;;;AAnB3B,eAAA,CAAAY,WAAA;;;;AAAA;;;;;AAAA,OAAAI,qBAAA,AAAAC,gBAAAP,UAAA,AAAAQ,oDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAP,UAAA;;;AAAA,IAAAU,aAAA,AAAA9C,gBAAA6B;IAAAiB,iBAAA,AAAA5B,4BAAA4B;kBAAA,AAAA3B,4CAAA2B,eAAA,zEAAOxB;YAAP,AAAAH,4CAAA2B,eAAA,nEACOpB;YADP,AAAAP,4CAAA2B,eAAA,nEAEOzB;sBAFP,AAAAF,4CAAA2B,eAAA,7EAGO1H;uBAHP,AAAA+F,4CAAA2B,eAAA,9EAIOvB;AAJP,AAAA,OAAAwB,eAKE,iBAAMhH,MAAI,AAACC;IACLiH,gBAAc,6EAAA,7EACC,EAAI,cAAA,bAAG,AAAOlH,mBACZ,SAAA,TAAOA,cACP,kBAAA,IAAA,tBAAM,SAAA,TAAOA,qCACfA;IAEfyF,UAAQ,AAAC0B,WAAc,CAAG,CAAG,CAAG3B,mBAAiBnG,mBAAiB6H,iBAAe7H;AAPvF,AAAA,0FAAA,iDAAA,2CAAA,kEAAA,wHAAA,2CAAA,6DAAA,gFAAA,6FAAA,mEAAA,wFAAA,tjBAQaiG,iGACTD,uIAAqBC,0EACMC,wFACKC,4EACTC,iFACOC,sEACTC;KAnB3B,AAAAkB,oDAAA,AAAAI,eAAAnB;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAI2CvB;;;AAiB9C,wCAAA,xCAAM8C,wFAAe9C,WAAWoB,eAAe2B;AAA/C,AACE,mBAAA,WAAAC,1BAAMC;AAAN,AAAoB,GAAI,6CAAA,GAAAD,hDAACrI;AAAL;;AAAe,kBAAAqI,XAACE;;;IAC9BC,iBAAS,gDAAA,hDAACvJ;AADhB,AAEE;AAAA,AAAA,0FAAA,gFAAA,mFAAA,iGAAA,2CAAA,qDAAA,SAAA,mEAAA,MAAA,uIAAA,+DAAA,WAAAwJ,3JAE0E,2CAAA,AAAA,AAAA1G,gCAAA,zEAAM,CAAA,AAAAA,kCAAA,lBAAI0E,wCAAmBA;AAFvG,AAEmI,OAACjH,sBAAOiH,eAAe,aAAA,AAAA,AAAAgC,bAA+BH;4MAGjL,AAACO,4CAAI,WAAAC,hPAWL,6CAAA,mFAAA,hIAACiC;AAXI,AAAA,IAAAhC,aAAAD;IAAAC,iBAAA,AAAA7C,4BAAA6C;YAAA,AAAA5C,4CAAA4C,eAAA,nEAAMrC;YAAN,AAAAP,4CAAA4C,eAAA,nEAAmBC;WAAnB,AAAA7C,4CAAA4C,eAAA,lEAAgCE;AAAhC,AAAA,0FAAA,yDAAA,2CAAA,qEAAA,AAAAlH,gCAAA,wDAAA,mFAAA,0HAAA,rRAC2ByG,mLACiB,kBAAA,AAAAzG,iCAAA,AAAA,iCAAA,lDAAOyG,6HAC7B;AAAA,AACE,qCAAA,rCAAChJ,sBAAOgJ;;AACR,IAAArH,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAA2H;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,AAAArH,gBAAuE0E;IAAvE4C,aAAA,sDAAAD,tDAA6CvD,iDAAoBoD;IAAjEC,kBAAAA;AAAA,AAAA,OAAAvF,4CAAAuF,gBAAA,IAAAG;;AAAA,GAAA,CAAAF,oBAAA;AAAA,IAAAG,aAAA,CAAAJ,YAAA;IAAAK,aAAA,AAAArD,4BAAAoD;IAAAE,aAAA,AAAArD,4CAAAoD,WAAA;IAAAE,aAAA,AAAAtD,4CAAAoD,WAAA;IAAAG,aAAA,qCAAA,rCACOlK,sBAAOgJ;IADdU,kBAAA,iBAAAS,iBAAAT;AAAA,AAAA,CAAAS,eAAA,OAAAF;;AAAA,CAAAE,eAAA,OAAAD;;AAAAC;;AAAA,AAAA,AAAA,oBAAAH;AAAA,IAAAI,uBAAAV;AAAA,AAAA,CAAAU,qBAAA,OAAA;;AAAAA;AAAA,IAAAC,uBAAAX;AAAA,AAAA,CAAAW,qBAAA,OAAA;;AAAAA;;AAAA;;AAAA,GAAA,CAAAV,oBAAA;AAAA,IAAAW,aAAA,qCAAA,rCAGatK,sBAAOiH;IAHpBsD,aAAA,CAGuC3B,iDAAAA,mDAAAA;IAHvCc,kBAAA,iBAAAc,iBAAAd;AAAA,AAAA,CAAAc,eAAA,OAAAF;;AAAAE;;AAAA,AAAA,AAAA,IAAAC,uBAAAf;AAAA,AAAA,CAAAe,qBAAA,OAAAF;;AAAA,CAAAE,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAd,oBAAA;AAAA,IAAAM,aAAA,CAAAP,YAAA;IAAAgB,aAAA,qBAAAT,rBAI2BoB;IAJ3BV,aAAA,eAAAD,fAImCY;IAJnCV,aAAA,MAAAD,NAISS;IAJT1B,kBAAAA;AAAA,AAAA,AAAA,IAAAmB,uBAAAnB;AAAA,AAAA,CAAAmB,qBAAA,OAAAD;;AAAA,CAAAC,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAlB,oBAAA;AAAA,IAAAmB,aAAA,CAAApB,YAAA;IAAAA,kBAAAA;AAAA,AAAA,OAAA7E,6CAAA6E,gBAAAoB;;AAAA;;;;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAC,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAhG;;AAAA,CAAAgG,eAAA,OAAA;;AAAAA;;yFAAArB;;AAAA,AAAA,IAAA1E,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAAlD,sBAAA2H;AAAA,AAAA,GAAA,AAAAxE,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAA6F;AAAA,AAAA,IAAAC,uBAAAvB;AAAA,AAAA,CAAAuB,qBAAA,OAAA9F;;AAAA8F;AAAA,GAAA,AAAA3F,cAAA,CAAAoE,YAAA;AAAA,IAAAwB,uBAAAxB;AAAA,AAAA,CAAAwB,qBAAA,OAAA,AAAA1F,gBAAA,CAAAkE,YAAA;;AAAAwB;AAAA,MAAA/F;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAA0E;;;;AAAA1E;;;;;gFAAA0E;;;;;yFAAAA;;;;;;;;;IAAAjE,uBAAA,iBAAA0F,iBAAA,AAAArJ;AAAA,AAAA,CAAAqJ,eAAAxF,AAAA,OAAAhE;;AAAAwJ;;AAAA,AAAA,OAAAvF,2DAAAH;;;AAAA9D;GALxB,uDAAA,2CAAA,4EAUsCuF,sBAAQsC;GAXnD,+CAAA,WAAAN,1DAACC;AAAD,AAAS,4JAAA,rJAACC,gDAAK,AAAA,mFAAAF;GADfrD;;;AAeZ,8BAAA,9BAAM2F;AAAN,AACE,IAAMC,OAAK,gDAAA,hDAAChM;IACNwH,iBAAe,gDAAA,hDAACxH;uBADtB,nBAEMmJ;AAFN,AAEmB,AAAI,2BAAA,3BAAC5I,sBAAOyL;;AACR,IAAA9J,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAA2J;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,AAA4BtK;IAA5BoK,kBAAAA;AAAA,AAAA,OAAAvH,4CAAAuH,gBAAA,IAAAE;;AAAA,GAAA,CAAAD,oBAAA;AAAA,IAAAE,aAAA,CAAAH,YAAA;IAAAI,aAAA,2BAAAD,3BACO7L,sBAAOyL;IADdC,kBAAAA;AAAA,AAAA,OAAA7G,6CAAA6G,gBAAAI;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAC,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAhH;;AAAA,CAAAgH,eAAA,OAAA;;AAAAA;;+EAAAL;;AAAA,AAAA,IAAA1G,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAAlD,sBAAA2J;AAAA,AAAA,GAAA,AAAAxG,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAA6G;AAAA,AAAA,IAAAC,uBAAAP;AAAA,AAAA,CAAAO,qBAAA,OAAA9G;;AAAA8G;AAAA,GAAA,AAAA3G,cAAA,CAAAoG,YAAA;AAAA,IAAAQ,uBAAAR;AAAA,AAAA,CAAAQ,qBAAA,OAAA,AAAA1G,gBAAA,CAAAkG,YAAA;;AAAAQ;AAAA,MAAA/G;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAA0G;;;;AAAA1G;;;;;sEAAA0G;;;;;+EAAAA;;;;;;;;;IAAAjG,uBAAA,iBAAA0G,iBAAA,AAAArK;AAAA,AAAA,CAAAqK,eAAAxG,AAAA,OAAAhE;;AAAAwK;;AAAA,AAAA,OAAAvG,2DAAAH;;;AAAA9D;;AAHvB,AAKE,AAACiH;;AACD;AAAA,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,+CAGG,kIAAA,mFAAA,0EAAA,mFAAA,mDAAA,yHAAA,AAAArG,sBAAA,AAAAA,wCAAA,yHAAA,AAAAA,ntBAAI,6CAAA,2DAAA,AAAAA,xGAAC/B,wHAAYiL,8XAGbtE,sDAAesE,sBAAMxE,2GACrB0B,sDAAe8C,MAAKxE,eAAe2B;;;AAE9C,gCAAA,hCAAMwD;AAAN,AACE,6EAAA,UAAA,vFAAC1M,6CAAgBF;;AACjB,wDAAA,jDAAC6M,oIAAab,oCAAK,wBAAA,xBAAGc;;AAExB,+BAAA,/BAAeC;AAAf,AAIE,OAACH;;;AAEH,+BAAA,/BAAMI;AAAN,AAGE,mBAAA,ZAACC","names":["expense-hound-cljs.core/api-key","reagent.core.atom","expense-hound-cljs.core/get-persistent!","atom","key","msg","ls-key","js/localStorage","cljs.core/reset!","new-atom","js/prompt","expense-hound-cljs.core/get-category-spendings","category-name","spendings","p1__28184#","cljs.core/filterv","cljs.core._EQ_","p1__28185#","cljs.core.mapv","and__5043__auto__","spendings-total","cljs.core.reduce","cljs.core/+","expense-hound-cljs.core/transform-keys","m","p1__28186#","cljs.core/update-keys","cljs.core/name","clojure.string/replace","cljs.core.keyword","expense-hound-cljs.core/fetch-data!","now","js/module$node_modules$dayjs$dayjs_min","day-start-ts","period-start-ts","c__11869__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__11870__auto__","switch__11784__auto__","state_28229","state_val_28230","inst_28190","cljs.core/PersistentVector","inst_28191","inst_28192","inst_28193","cljs.core/deref","inst_28194","inst_28195","cljs.core/PersistentHashMap","inst_28196","inst_28197","inst_28198","inst_28199","inst_28200","inst_28201","inst_28202","inst_28203","inst_28204","inst_28205","inst_28206","inst_28207","inst_28208","inst_28209","inst_28210","inst_28211","inst_28212","inst_28213","inst_28214","inst_28215","inst_28216","inst_28217","inst_28218","inst_28219","cljs.core.async.impl.ioc-helpers/take!","inst_28221","inst_28222","cljs.core.nth","inst_28223","inst_28224","inst_28225","vec__28187","inst_28226","inst_28227","cljs.core.async.impl.ioc-helpers/return-chan","statearr-28231","state-machine__11785__auto__","ret-value__11786__auto__","result__11787__auto__","cljs.core/keyword-identical?","ex__11788__auto__","e28232","statearr-28233","cljs.core/seq","statearr-28234","cljs.core/first","state__11871__auto__","statearr-28235","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","categories","monthly-spendings","cljs.core.async.map","cljs.core/vector","cljs_http.client.get","category","cljs.core.merge","cljs.core.assoc","expense-hound-cljs.core/submit-transaction!","sum","cljs_http.client.post","p__28236","map__28237","cljs.core/--destructure-map","cljs.core.get","expense-hound-cljs.core/progress-bar","label","base-budget","remaining-budget","per-day","about-to-spend","color","expense-hound-cljs.core/progress-bars","iter__5523__auto__","s__28239","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__28241","cljs.core/chunk-buffer","i__28240","map__28242","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28238","cljs.core/chunk-rest","map__28243","cljs.core/cons","cljs.core/rest","days-to-reset","js/Math.floor","expense-hound-cljs.core/input-section","reset-data!","p1__28244#","default-to-0","js/parseFloat","loading?","p1__28245#","p1__28246#","cljs.core.filter","cljs.core.not_EQ_","cljs.core.map","p__28247","map__28248","emoji","name","state_28268","state_val_28269","inst_28250","inst_28251","inst_28253","inst_28254","inst_28255","inst_28256","inst_28257","statearr-28270","statearr-28271","statearr-28272","inst_28259","inst_28260","statearr-28273","statearr-28274","inst_28262","inst_28263","inst_28264","statearr-28275","inst_28266","statearr-28276","e28277","statearr-28278","statearr-28279","statearr-28280","js/alert","cljs.core/clj->js","js/JSON.stringify","cljs.core.into","expense-hound-cljs.core/app","data","state_28286","state_val_28287","inst_28281","inst_28283","inst_28284","statearr-28288","e28289","statearr-28290","statearr-28291","statearr-28292","expense-hound-cljs.core/start","reagent.dom.render","js/document","expense-hound-cljs.core/init","expense-hound-cljs.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns expense-hound-cljs.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [reagent.core :as r]\n            [clojure.string :as str]\n            [reagent.dom :as rdom]\n            [cljs-http.client :as http]\n            [cljs.core.async :refer [<!] :as async]\n            [\"dayjs\" :as djs]))\n\n(def api-key (r/atom :loading))\n\n(defn get-persistent! [atom key msg]\n  (let [ls-key (. js/localStorage (getItem key))]\n    (if-not (nil? ls-key)\n      (reset! atom ls-key)\n      (let [new-atom (js/prompt msg)]\n        (reset! atom new-atom)\n        (. js/localStorage (setItem key new-atom))))))\n\n(defn get-category-spendings [category-name spendings]\n  (let [spendings (->> spendings\n                       ;; \u0431\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u043d\u043e\u0441\u044f\u0449\u0438\u0435\u0441\u044f \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u0442\u044b\n                       (filterv #(or (= (:category_name %) category-name) (= category-name \"all\")))\n                       ;; \u0431\u0435\u0440\u0435\u043c \u0441\u0443\u043c\u043c\u0443\n                       (mapv #(:sum %))\n                       ;; \u0444\u043e\u043b\u0431\u0435\u0447\u0438\u043c\u0441\u044f \u043d\u0430 \u043f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n                       (and []))\n        spendings-total (reduce + 0 spendings)]\n    {:spendings spendings\n     :spendings-total spendings-total}))\n\n(defn transform-keys [m] (update-keys m #(-> %\n                                             name\n                                             (str/replace \"_\" \"-\")\n                                             keyword)))\n\n(defn fetch-data! []\n  (let [now (djs)\n        day-start-ts (.valueOf (.startOf now \"day\"))\n        period-start-ts (.valueOf (if (< (.date now) 5)\n                                    (.subtract (.date now 5) 1 \"month\")\n                                    (.date now 5)))]\n    (go (let [[categories\n               spendings\n               monthly-spendings] (<! (async/map vector [(http/get \"https://dpefczqikdvufeuyldmj.supabase.co/rest/v1/categories?order=name\"\n                                                                   {:headers {\"apikey\" @api-key}\n                                                                    :with-credentials? false})\n                                                         (http/get (str \"https://dpefczqikdvufeuyldmj.supabase.co/rest/v1/spendings?select=category_name,sum&datetime=gt.\" day-start-ts)\n                                                                   {:headers {\"apikey\" @api-key}\n                                                                    :with-credentials? false})\n                                                         (http/get (str \"https://dpefczqikdvufeuyldmj.supabase.co/rest/v1/spendings?select=category_name,sum&datetime=gt.\" period-start-ts)\n                                                                   {:headers {\"apikey\" @api-key}\n                                                                    :with-credentials? false})]))]\n          (->> categories\n               (:body)\n               (mapv (fn [category]\n                       (-> category\n                           (transform-keys)\n                           (merge (get-category-spendings (:name category) (:body spendings)))\n                           (assoc :remaining-budget (- (:base_budget category) (:spendings-total (get-category-spendings (:name category) (:body monthly-spendings)))))))))))))\n\n(defn submit-transaction! [category-name sum]\n  (http/post \"https://dpefczqikdvufeuyldmj.supabase.co/rest/v1/spendings\"\n             {:headers {\"apikey\" @api-key}\n              :with-credentials? false\n              :json-params {:sum sum :category_name category-name :datetime (.valueOf (djs))}}))\n\n(defn progress-bar [{label :label\n                     base-budget :base-budget\n                     remaining-budget :remaining-budget\n                     per-day :per-day\n                     about-to-spend :about-to-spend\n                     color :color}]\n  [:<> {:key label}\n   [:div label]\n   [:div.progress-bar--bar {:style {\"--color\" (str color \"33\")\n                                    \"--opaque-color\" color\n                                    \"--width-before-change\" (str (* 100 (/ remaining-budget base-budget)) \"%\")\n                                    \"--width-after-change\" (str (* 100 (/ (- remaining-budget about-to-spend) base-budget)) \"%\")}}\n    (if (= 0 about-to-spend)\n      (str per-day)\n      [:<> [:s {:style {:color \"tomato\"}} per-day] [:span (- per-day about-to-spend)]])]\n   [:div remaining-budget]])\n\n(defn progress-bars [categories about-to-spend]\n  [:div.progress-bar--container\n   (for [{base-budget :base-budget\n          color :color\n          label :label\n          spendings-total :spendings-total\n          remaining-budget :remaining-budget} categories]\n     (let [now (djs)\n           days-to-reset (.diff\n                          (if (< (.date now) 5)\n                            (.date now 5)\n                            (.add (.date now 5) 1 \"month\"))\n                          now\n                          \"day\")\n           per-day (js/Math.floor (- (/ (+ remaining-budget spendings-total) days-to-reset) spendings-total))]\n       [:<> {:key label}\n        [progress-bar {:label label\n                       :base-budget base-budget\n                       :remaining-budget remaining-budget\n                       :per-day per-day\n                       :about-to-spend about-to-spend\n                       :color color}]]))])\n\n(defn input-section [categories about-to-spend reset-data!]\n  (let [default-to-0 #(if (= \"\" %) 0 (js/parseFloat %))\n        loading? (r/atom false)]\n    (fn []\n      [:div.input-section\n       [:input.input-section--input {:type \"number\" :placeholder \"450\" :value (when (> @about-to-spend 0) @about-to-spend) :on-change #(reset! about-to-spend (->> % .-currentTarget .-value default-to-0))}]\n       (->> categories\n            (filter #(not= (:name %) \"all\"))\n            (map (fn [{color :color emoji :emoji name :name}]\n                   [:button {:data-loading @loading?\n                             :class [\"input-section--button\" (when @loading? \"input-section--button--loading\")]\n                             :on-click (fn []\n                                         (reset! loading? true)\n                                         (go (let [{success :success body :body} (<! (submit-transaction! name @about-to-spend))]\n                                               (reset! loading? false)\n                                               (if success\n                                                 (do (reset! about-to-spend 0) (reset-data!))\n                                                 (js/alert (-> body clj->js js/JSON.stringify))))))\n                             :style {:background-color color}} emoji]))\n            (into [:<>]))])))\n\n(defn app []\n  (let [data (r/atom nil)\n        about-to-spend (r/atom 0)\n        reset-data! #(do (reset! data :loading) \n                         (go (let [fetched-data (<! (fetch-data!))]\n                               (reset! data fetched-data))))]\n    (reset-data!)\n    (fn []\n      [:div\n       [:h1 \"\u0422\u0440\u0435\u043a\u0435\u0440\"]\n       (if (= :loading @data)\n         [:div.loader] \n         [:div\n          [progress-bars @data @about-to-spend]\n          [input-section @data about-to-spend reset-data!]])])))\n\n(defn start []\n  (get-persistent! api-key \"api-key\" \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043b\u044e\u0447 \u043a API\")\n  (rdom/render [app] (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}